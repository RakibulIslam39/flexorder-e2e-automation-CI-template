name: FlexOrder Plugin CI

on:
  push:
    branches: [ main, develop, dev ]
  pull_request:
    branches: [ main, develop, dev ]

env:
  WP_PROJECT_TYPE: plugin
  WP_VERSION: latest
  WP_MULTISITE: 0
  WP_TEST_URL: http://localhost:12000
  WP_TEST_USER: test
  WP_TEST_USER_PASS: test
  DB_NAME: test_flexorder
  DB_USER: root
  DB_PASS: ''
  DB_HOST: localhost
  NODE_VERSION: '18'

jobs:
  lint-and-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_sqlite, phar, tokenizer, xml, xmlreader, xmlwriter, zip, curl, soap, openssl, fileinfo, sodium, exif, mysqli

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run PHP CodeSniffer
      run: composer run phpcs

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  setup-wordpress:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test_flexorder
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_sqlite, phar, tokenizer, xml, xmlreader, xmlwriter, zip, curl, soap, openssl, fileinfo, sodium, exif, mysqli
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Node.js dependencies
      run: |
        npm ci
        npm run install:browsers

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Install WordPress test environment (Koodimonni template)
      run: |
        # Clone Koodimonni WordPress test template
        git clone https://github.com/Koodimonni/wordpress-test-template wp-tests
        
        # Install WordPress test environment using Koodimonni script
        bash wp-tests/bin/install-wp-tests.sh $DB_NAME $DB_USER $DB_PASS $DB_HOST $WP_VERSION
        
        # Verify WordPress installation
        ls -la /tmp/wordpress/
        ls -la /tmp/wordpress-tests-lib/

    - name: Install WooCommerce
      run: |
        cd /tmp/wordpress
        # Install WooCommerce using wp-cli
        wp plugin install woocommerce --activate --allow-root
        
        # Verify WooCommerce installation
        wp plugin list --allow-root

    - name: Configure WooCommerce and generate API credentials
      run: |
        cd /tmp/wordpress
        
        # Configure WooCommerce settings (matching Koodimonni approach)
        wp option add woocommerce_api_enabled yes --allow-root
        wp option add woocommerce_currency USD --allow-root
        wp option add woocommerce_currency_pos left --allow-root
        wp option add woocommerce_price_thousand_sep , --allow-root
        wp option add woocommerce_price_decimal_sep . --allow-root
        wp option add woocommerce_price_num_decimals 2 --allow-root
        
        # Generate WooCommerce REST API credentials (as per your requirement)
        echo "Generating WooCommerce REST API credentials..."
        API_KEY_OUTPUT=$(wp wc api_key create --user=1 --description="FlexOrder CI Test API Key" --permissions=read_write --format=json --allow-root)
        
        # Store credentials in environment variables (for test execution)
        CONSUMER_KEY=$(echo $API_KEY_OUTPUT | jq -r '.consumer_key')
        CONSUMER_SECRET=$(echo $API_KEY_OUTPUT | jq -r '.consumer_secret')
        
        echo "CONSUMER_KEY=$CONSUMER_KEY" >> $GITHUB_ENV
        echo "CONSUMER_SECRET=$CONSUMER_SECRET" >> $GITHUB_ENV
        
        # Also store in a file for local access during tests
        echo "WOOCOMMERCE_CONSUMER_KEY=$CONSUMER_KEY" > /tmp/wordpress/.env
        echo "WOOCOMMERCE_CONSUMER_SECRET=$CONSUMER_SECRET" >> /tmp/wordpress/.env
        
        echo "✅ WooCommerce API credentials generated:"
        echo "Consumer Key: $CONSUMER_KEY"
        echo "Consumer Secret: [HIDDEN]"
        
        # Verify API credentials work
        wp wc api_key list --allow-root

    - name: Generate test data (20 products + 50 orders)
      run: |
        cd /tmp/wordpress
        
        echo "Creating 20 test products..."
        # Create 20 test products with different prices and statuses
        for i in {1..20}; do
          wp wc product create --name="Test Product $i" --type=simple --regular_price=$((10 + $i * 5)).00 --status=publish --allow-root
        done
        
        echo "Creating 50 test orders with different statuses..."
        # Create 50 test orders with different statuses (as per your requirement)
        for i in {1..15}; do
          wp wc order create --status=pending --allow-root
        done
        
        for i in {1..15}; do
          wp wc order create --status=processing --allow-root
        done
        
        for i in {1..10}; do
          wp wc order create --status=completed --allow-root
        done
        
        for i in {1..5}; do
          wp wc order create --status=cancelled --allow-root
        done
        
        for i in {1..5}; do
          wp wc order create --status=failed --allow-root
        done
        
        echo "✅ Test data created:"
        echo "- 20 products created"
        echo "- 50 orders created with different statuses"
        
        # Verify test data
        wp wc product list --allow-root | head -10
        wp wc order list --allow-root | head -10

    - name: Build FlexOrder plugin (Free and Pro versions)
      run: |
        echo "Building FlexOrder plugin packages..."
        
        # Create plugin directory structure
        mkdir -p /tmp/flexorder-free
        mkdir -p /tmp/flexorder-pro
        
        # Copy plugin files (excluding test files and build artifacts)
        # Following Koodimonni approach for plugin preparation
        rsync -av --exclude='node_modules' --exclude='test-results' --exclude='playwright-report' --exclude='.git' --exclude='tests' --exclude='wp-tests' --exclude='vendor' . /tmp/flexorder-free/
        rsync -av --exclude='node_modules' --exclude='test-results' --exclude='playwright-report' --exclude='.git' --exclude='tests' --exclude='wp-tests' --exclude='vendor' . /tmp/flexorder-pro/
        
        # Create zip files (as per your requirement for both Free and Pro versions)
        cd /tmp
        zip -r flexorder-free.zip flexorder-free/
        zip -r flexorder-pro.zip flexorder-pro/
        
        echo "✅ Plugin packages created:"
        echo "- flexorder-free.zip"
        echo "- flexorder-pro.zip"
        
        # Verify plugin packages
        ls -la /tmp/*.zip

    - name: Install and activate FlexOrder plugin
      run: |
        cd /tmp/wordpress
        
        # Install FlexOrder plugin (Free version for testing)
        echo "Installing FlexOrder plugin..."
        wp plugin install /tmp/flexorder-free.zip --activate --allow-root
        
        # Verify plugin installation and activation
        echo "Verifying plugin installation..."
        wp plugin list --allow-root | grep flexorder
        
        # Check if plugin is active
        if wp plugin is-active flexorder --allow-root; then
          echo "✅ FlexOrder plugin installed and activated successfully"
        else
          echo "❌ FlexOrder plugin activation failed"
          exit 1
        fi

    - name: Start WordPress server (Koodimonni approach)
      run: |
        cd /tmp/wordpress
        
        # Copy router.php from Koodimonni template (following their approach)
        cp ../wp-tests/lib/router.php ./router.php
        
        # Start WordPress server using Koodimonni's router.php approach
        echo "Starting WordPress server on port 12000..."
        php -S 0.0.0.0:12000 router.php &
        SERVER_PID=$!
        
        # Wait for server to be ready (following Koodimonni's approach)
        echo "Waiting for WordPress server to be ready..."
        for i in {1..15}; do
          if curl -f http://localhost:12000 > /dev/null 2>&1; then
            echo "✅ WordPress server is ready and responding"
            break
          fi
          echo "Waiting for WordPress server... (attempt $i/15)"
          sleep 3
        done
        
        # Final verification
        if curl -f http://localhost:12000 > /dev/null 2>&1; then
          echo "✅ WordPress server started successfully"
          echo "Server URL: http://localhost:12000"
        else
          echo "❌ WordPress server failed to start"
          exit 1
        fi

    - name: Run E2E tests
      env:
        SITE_URL: http://localhost:12000
        WOOCOMMERCE_CONSUMER_KEY: ${{ env.CONSUMER_KEY || secrets.WOOCOMMERCE_CONSUMER_KEY }}
        WOOCOMMERCE_CONSUMER_SECRET: ${{ env.CONSUMER_SECRET || secrets.WOOCOMMERCE_CONSUMER_SECRET }}
        URL: http://localhost:12000
        USER_NAME: test
        PASSWORD: test
        ADMIN_PANEL_URL: http://localhost:12000/wp-admin
        GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
        GOOGLE_SHEET_URL: ${{ secrets.GOOGLE_SHEET_URL }}
        GOOGLE_SHEET_SCOPES: ${{ secrets.GOOGLE_SHEET_SCOPES }}
        SHEET_NAME: ${{ secrets.SHEET_NAME }}
        SHEET_RANGE: ${{ secrets.SHEET_RANGE }}
        GOOGLE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_ACCOUNT_EMAIL }}
        GOOGLE_ACCOUNT_PASSWORD: ${{ secrets.GOOGLE_ACCOUNT_PASSWORD }}
        SERVICE_ACCOUNT_UPLOAD_FILE: ${{ secrets.SERVICE_ACCOUNT_UPLOAD_FILE }}
        Replace_Plugin_Path: /tmp/flexorder-free
        APPS_SCRIPT_DEPLOYMENT_ID: ${{ secrets.APPS_SCRIPT_DEPLOYMENT_ID }}
        APPS_SCRIPT_PROJECT_ID: ${{ secrets.APPS_SCRIPT_PROJECT_ID }}
        CI: true
      run: |
        # Install Playwright browsers if not already installed
        npx playwright install --with-deps chromium
        
        # Run tests with retry on failure
        npm run test || (echo "Tests failed, retrying once..." && npm run test)

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  php-unit-tests:
    runs-on: ubuntu-latest
    needs: setup-wordpress
    timeout-minutes: 20
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test_flexorder
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_sqlite, phar, tokenizer, xml, xmlreader, xmlwriter, zip, curl, soap, openssl, fileinfo, sodium, exif, mysqli
        coverage: xdebug

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Install WordPress test environment (Koodimonni template)
      run: |
        # Clone Koodimonni WordPress test template
        git clone https://github.com/Koodimonni/wordpress-test-template wp-tests
        
        # Install WordPress test environment using Koodimonni script
        bash wp-tests/bin/install-wp-tests.sh $DB_NAME $DB_USER $DB_PASS $DB_HOST $WP_VERSION
        
        # Verify WordPress installation
        ls -la /tmp/wordpress/
        ls -la /tmp/wordpress-tests-lib/

    - name: Install WooCommerce
      run: |
        cd /tmp/wordpress
        wp plugin install woocommerce --activate --allow-root

    - name: Run PHPUnit tests (Koodimonni approach)
      run: |
        # Run PHPUnit tests following Koodimonni template approach
        echo "Running PHPUnit tests..."
        phpunit --coverage-clover=coverage.xml --coverage-html=coverage --verbose
        
        echo "✅ PHPUnit tests completed"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [lint-and-quality, security-scan, setup-wordpress, php-unit-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build plugin packages
      run: |
        # Create production builds
        mkdir -p dist/flexorder-free
        mkdir -p dist/flexorder-pro
        
        # Copy files for free version
        rsync -av --exclude='node_modules' --exclude='test-results' --exclude='playwright-report' --exclude='.git' --exclude='tests' --exclude='dist' . dist/flexorder-free/
        
        # Copy files for pro version (you can add pro-specific files here)
        rsync -av --exclude='node_modules' --exclude='test-results' --exclude='playwright-report' --exclude='.git' --exclude='tests' --exclude='dist' . dist/flexorder-pro/
        
        # Create zip files
        cd dist
        zip -r flexorder-free.zip flexorder-free/
        zip -r flexorder-pro.zip flexorder-pro/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: plugin-builds
        path: dist/
        retention-days: 90

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/flexorder-free.zip
          dist/flexorder-pro.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
